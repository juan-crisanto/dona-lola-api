package com.donalola.foodmenu.infraestructure.dao.entity;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.donalola.commons.dynamodb.util.DynamoDBConverter;
import lombok.*;
import org.springframework.data.annotation.Id;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@ToString
@DynamoDBTable(tableName = "MENU")
public class FoodMenuDynamoEntity {


    @Id
    @Getter(onMethod = @__({@DynamoDBAutoGeneratedKey, @DynamoDBHashKey}))
    private String id;

    @DynamoDBAttribute(attributeName = "foodPlaceId")
    private String foodPlaceId;

    @DynamoDBAttribute(attributeName = "foodPlaceName")
    private String foodPlaceName;

    @DynamoDBTypeConverted(converter = DynamoDBConverter.LocalDateTimeConverter.class)
    @DynamoDBAttribute(attributeName = "createdDatetime")
    private LocalDateTime createdDatetime;

    @DynamoDBTypeConverted(converter = DynamoDBConverter.LocalDateTimeConverter.class)
    @DynamoDBAttribute(attributeName = "finishedDatetime")
    private LocalDateTime finishedDatetime;

    @DynamoDBAttribute(attributeName = "name")
    private String name;

    @DynamoDBAttribute(attributeName = "status")
    private String status;

    @DynamoDBAttribute(attributeName = "items")
    private List<ItemMenuEntity> items;

    @AllArgsConstructor
    @NoArgsConstructor
    @Setter
    @Getter
    @DynamoDBDocument
    public static class ItemMenuEntity {

        @DynamoDBHashKey
        @DynamoDBAutoGeneratedKey
        private String id;

        @DynamoDBTypeConverted(converter = DynamoDBConverter.LocalDateTimeConverter.class)
        @DynamoDBAttribute(attributeName = "createdDateTime")
        private LocalDateTime createdTime;

        @DynamoDBAttribute(attributeName = "name")
        private String name;

        @DynamoDBAttribute(attributeName = "description")
        private String description;

        @DynamoDBAttribute(attributeName = "quantityAvailable")
        private Integer quantityAvailable;

        @DynamoDBTypeConverted(converter = DynamoDBConverter.BigDecimalConverter.class)
        @DynamoDBAttribute(attributeName = "price")
        private BigDecimal price;

        @DynamoDBAttribute(attributeName = "takenOrders")
        private Integer takenOrders;

        @DynamoDBAttribute(attributeName = "image")
        private String image;


    }
}
